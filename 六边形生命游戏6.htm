<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0067)file:///D:/%E4%B8%8B%E8%BD%BD/%E6%B8%B8%E6%88%8F/js/Life%20Game.htm -->
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		
		<title>Life Game</title>
		<script type="text/javascript">
		Vector2 = function ( x , y ) {
	this.x = x;
	this.y = y;
};
Vector2.prototype = {
	copy : function ( ) {
		return new Vector2 ( this.x , this.y );
	} ,
	length : function ( ) {
		return Math.sqrt ( this.x * this.x + this.y * this.y );
	} ,
	sqrlength : function ( ) {
		return this.x * this.x + this.y * this.y;
	} ,
	normalize : function ( ) {
		var inv = 1 / this.length ( );
		return new Vector2 ( this.x * inv , this.y * inv );
	} ,
	negate : function ( ) {
		return new Vector2 ( - this.x , - this.y );
	} ,
	add : function ( v ) {
		return new Vector2 ( this.x + v.x , this.y + v.y );
	} ,
	subtract : function ( v ) {
		return new Vector2 ( this.x - v.x , this.x - v.y );
	} ,
	multiply : function ( f ) {
		return new Vector2 ( this.x * f , this.y * f );
	} ,
	divide : function ( f ) {
		return this.multiply ( 1 / f );
	} ,
	dot : function ( v ) {
		return this.x * v.x + this.y + v.y;
	}
}
Vector2.zero = new Vector2 ( 0 , 0 );
function LifeGame(canvasId, lines, columns, livingCells) {
	game = this;
	this.speed = 100;
	this.map = new Map(canvasId, lines, columns, livingCells);
	this.intervalNumber = -1;
	
	$("speed").value = game.speed;

	window.onresize = function() {
		windowWidth = window.innerWidth / 2;
		windowHeight = window.innerHeight;
		game.map.canvas.width = windowWidth;
		game.map.canvas.height = windowHeight;
		game.map.context = game.map.canvas.getContext('2d');
		game.map.ajustMapSize();
		game.map.render();
	};
	this.createMap = function(canvasId, lines, columns, livingCells) {
		this.map = new Map(this.map.canvasId, lines, columns, livingCells);
		this.map.ajustMapSize();
		this.map.render();
	}
	this.clearMap = function() {
		this.map = new Map(this.map.canvasId, this.map.lines, this.map.columns, 0);

		this.map.draw();
	}
	this.startGame = function() {
		this.map.ajustMapSize();
		this.loop(this.speed);
		$("startTaggle").innerHTML = "Stop";
		$("world_status").innerHTML = "Start";
	}
	this.loop = function(speed) {
		this.map.render();
		this.intervalNumber = setInterval(game.map.draw, speed == null ? 100 : speed);
		// this.intervalNumber = setTimeout(game.loop, speed == null ? 100 : speed);
	}
	this.stop = function() {
		clearInterval(this.intervalNumber);
		// clearTimeout(this.intervalNumber);
		this.intervalNumber = -1;
		// this.map.render();
		$("startTaggle").innerHTML = "Start";
		$("world_status").innerHTML = "Stop";
	}
	this.changeCellStatus = function(cell) {
		if (cell.currentStatus) {
			cell.currentStatus = 0;
			var dynamicArrayLength = game.map.dynamicArray.length;
			for (var i = 0; i < dynamicArrayLength; ++i) {
				if (cell.position.x == game.map.dynamicArray[i].position.x && cell.position.y == game.map.dynamicArray[i].position.y) {
					this.map.dynamicArray.splice(i, 1);
					break;
				}
			}
		} else {
			cell.currentStatus = 1;
			this.map.dynamicArray.push(cell);
		}
		this.map.livingCells = game.map.dynamicArray.length;
		this.map.render();
	}
}
var Map = function(canvasId, lines, columns, livingCells) {
	map = this;
	this.canvasId = canvasId;
	this.canvas = document.getElementById(this.canvasId);
	this.context = this.canvas.getContext('2d');

	this.lines = parseInt(lines);
	this.columns = parseInt(columns);
	this.mapArray = new Array();
	this.dynamicArray = new Array();
	this.adjustArray = new Array();
	this.mapSize = this.lines * this.columns;
	this.livingCells = livingCells <= this.mapSize ? livingCells : this.mapSize;
	this.cellWidth = this.cellHeight = null;
	this.mapWidth = 0;
	this.mapHeight = 0;

	// this.stats = new Stats();
	// this.stats.domElement.style.position = 'absolute';
	// this.stats.domElement.style.top = '0px';
	// this.stats.domElement.style.left = '0px';
	// $("canvas").appendChild(this.stats.domElement);
	// addEvent("stats", "mouseover", function() {
		// if (this.style["left"] == "0px"){
			// this.style["left"] = "auto";
			// this.style["right"] ="0px";
		// }else if(this.style["right"] == "0px"){
			// this.style["right"] = "auto";
			// this.style["left"] ="0px";
		// }
	// });

	this.colorList = {
		dieCell : new Color('#D0D0D0'),
		livingCell : new Color('#FF6667'),
		border : new Color('#D0D0D0'),
		background : new Color('#D0D0D0')
	}

	this.fps = 0;
	this.initialise = function() {
		for (var i = 0; i < this.lines; ++i) {
			this.mapArray[i] = new Array();
			for (var ii = 0; ii < this.columns; ++ii) {
				this.mapArray[ i ][ii] = new Cell(new Vector2(i, ii), 0, 0);
			}
		}
		var i = this.livingCells - 1;
		while (i >= 0) {
			var tempn1 = random(0, map.lines - 1);
			var tempn2 = random(0, map.columns - 1);
			if (!this.mapArray[ tempn1 ][tempn2].currentStatus) {
				this.dynamicArray.push(map.mapArray[ tempn1 ][tempn2]);
				this.mapArray[ tempn1 ][tempn2].currentStatus = 1;
			} else
				++i;
			--i;

		}
		$("lines").value = this.lines;
		$("columns").value = this.columns;
		$("need_cells").value = this.livingCells;
		$("living_cells").value = this.livingCells;
		this.ajustMapSize();
	}
	this.execute = function() {
		this.adjustArray.length = 0;
		k = this.dynamicArray.length - 1;
		while (k >= 0) {
			cell = this.dynamicArray[k];
			if (!cell.opreated) {
				this.adjustArray.push(cell);
				cell.opreated = 1;
			}
			i = cell.position.x;
			ii = cell.position.y;
			whichLine1 = (i + this.lines - 1) % this.lines;
			whichLine3 = (i + this.lines + 1) % this.lines;
			whichLine2 = (i + this.lines - 2) % this.lines;
			whichLine4 = (i + this.lines + 2) % this.lines;			
			whichColumn1 = (ii + this.columns - 1) % this.columns;
			whichColumn3 = (ii + this.columns + 1) % this.columns;
			position = [[whichLine1, whichColumn1], [whichLine2, ii], [whichLine1, whichColumn3], [whichLine3, whichColumn1], [whichLine4, ii], [whichLine3, whichColumn3]];
			for ( p = 0; p < 6; ++p) {++this.mapArray[position[p][0]][position[p][1]].livingCellsAround;
				if (!this.mapArray[position[p][0]][position[p][1]].opreated) {
					this.adjustArray.push(this.mapArray[position[p][0]][position[p][1]]);
					this.mapArray[position[p][0]][position[p][1]].opreated = 1;
				}
			}--k;
		}
		this.dynamicArray.length = 0;
		i = this.adjustArray.length - 1;
		while (i >= 0) {
			this.adjustArray[i].opreated = 0;
			if (this.adjustArray[i].livingCellsAround == 3) {
				this.adjustArray[i].currentStatus = 1;
				// console.log(this.adjustArray[i].position.x + "," + this.adjustArray[i].position.y + "(" + this.adjustArray[i].currentStatus + "): " + this.adjustArray[i].livingCellsAround + "-> Living");
				this.dynamicArray.push(this.adjustArray[i]);
			} else if (this.adjustArray[i].currentStatus == 1 && (this.adjustArray[i].livingCellsAround < 2 || this.adjustArray[i].livingCellsAround > 3)) {
				this.adjustArray[i].currentStatus = 0;
				// console.log(this.adjustArray[i].position.x + "," + this.adjustArray[i].position.y + "(" + this.adjustArray[i].currentStatus + "): " + this.adjustArray[i].livingCellsAround + "-> Die");
			} else if (this.adjustArray[i].currentStatus == 1 && (this.adjustArray[i].livingCellsAround == 2 || this.adjustArray[i].livingCellsAround == 3)) {
				this.adjustArray[i].currentStatus = 1;
				this.dynamicArray.push(this.adjustArray[i]);
			} else {
				this.adjustArray[i].currentStatus = 0;
			}
			this.adjustArray[i].livingCellsAround = 0;
			--i;
		}
		this.livingCells = this.dynamicArray.length;
	}
	this.ajustMapSize = function() {
		var width = window.innerWidth / 2;
		var height = window.innerHeight;
		this.canvas.width = width;
		this.canvas.height = height;
		if (this.canvas.height / this.lines > this.canvas.width / this.columns)
			{this.cellWidth = this.cellHeight = this.canvas.width / this.columns;
			//this.cellHeight = this.cellWidth * 0.7;
			}
		else {
			this.cellWidth = this.cellHeight = this.canvas.height / this.lines;
			//this.cellHeight = this.cellWidth * 0.7;
		}
		this.mapWidth = this.columns * this.cellWidth;
		this.mapHeight = this.lines * this.cellWidth;
		this.canvas.width = this.columns * this.cellWidth;
		this.canvas.height = this.lines * this.cellHeight;
	}
	this.draw = function() {
		if (!map.livingCells) {
			game.stop();
		}
		$("living_cells").value = map.livingCells;
		map.execute();
		map.render();
		++map.fps;
		// map.stats.update();
	}
	this.render = function() {
		$("living_cells").value = this.livingCells;
		this.context.fillStyle = this.colorList.background.hex;
		this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
		i = this.dynamicArray.length - 1;
		while (i >= 0) {
			this.context.fillStyle = this.colorList.livingCell.hex;
			this.context.fillRect(this.dynamicArray[i].position.y * this.cellWidth, this.dynamicArray[i].position.x * this.cellHeight, this.cellWidth, this.cellHeight);
			--i;
		}
		i = this.columns - 1;
		    this.context.strokeStyle = '#000000';
		    this.context.fillStyle = '#000000';
  	while (i >= 0) {
		  j = this.lines - 1;
		  while (j >= 0) {
		    if ((i+j)/2 >= Math.round((i+j)/2 )) {
		    this.context.fillStyle = '#D0D0D0';
		    this.context.fillRect(i * this.cellWidth, j * this.cellHeight, this.cellWidth, this.cellHeight);
		    this.context.beginPath();
		    this.context.strokeStyle = '#D0D0D0';
		    this.context.strokeStyle = "000000";
		    this.context.lineWidth = 1;
		    this.context.beginPath();
		    this.context.moveTo(i * this.cellHeight, j * this.cellWidth);
		    this.context.lineTo(i * this.cellHeight + this.cellHeight / 4, j * this.cellWidth + this.cellWidth / 2);
		    this.context.lineTo(i * this.cellHeight + this.cellHeight *3/4, j * this.cellWidth + this.cellWidth / 2);
		    this.context.lineTo(i * this.cellHeight + this.cellWidth, j * this.cellWidth);
		    this.context.moveTo(i * this.cellHeight, (j+1) * this.cellWidth);
		    this.context.lineTo(i * this.cellHeight + this.cellHeight / 4, j * this.cellWidth + this.cellWidth / 2);
		    this.context.moveTo(i * this.cellHeight + this.cellWidth *3/4, j * this.cellWidth + this.cellWidth / 2);
		    this.context.lineTo((i+1) * this.cellHeight, (j+1) * this.cellWidth);
		    this.context.stroke();
		    }
		  --j;
		  }
		i = i-1;
  	}
		if (this.mapSize < 100000) {
			this.context.strokeStyle = this.colorList.border.hex;
			this.context.lineWidth = "1";
			this.context.beginPath();
			i = this.lines + 1;
			while (i > 0) {
				this.context.moveTo(0, i * this.cellHeight);
				this.context.lineTo(this.columns * this.cellWidth, i * this.cellHeight); --i;
			}
			i = this.columns + 1;
			while (i > 0) {
				this.context.moveTo(i * this.cellWidth, 0);
				this.context.lineTo(i * this.cellHeight, this.lines * this.cellHeight); --i;
			}
			this.context.stroke();
		}
	}
	this.initialise();
	this.render();
}
var random = function(min, max) {
	return Math.round(Math.random() * (max - min ));
}
var random0_1 = function() {
	return Math.round(Math.random());
}
var Cell = function(position, currentStatus, nextStatus) {
	this.position = position;
	this.currentStatus = currentStatus;
	// this.nextStatus = nextStatus;
	// this.color = this.currentStatus? "#FF6667" : "#D0D0D0";
	this.livingCellsAround = 0;
	this.opreated = 0;
}
/**
 * @author Color
 */
function Color(r, g, b, a) {
	if ( typeof arguments[0] == typeof arguments[1] && typeof arguments[1] == typeof arguments[2] && typeof arguments[2] == "number") {
		this.r = Number(arguments[0]);
		this.g = Number(arguments[1]);
		this.b = Number(arguments[2]);
		for (var i = 0; i < 3; ++i) {
			this.hex = "#" + toHex2(this.r) + toHex2(this.g) + toHex2(this.b);
		}
		if (arguments.length == 4) {
			this.alpha = arguments[3];
		} else {
			this.alpha = 127;
		}
	} else if ( typeof arguments[0] == "string") {
		this.hex = arguments[0];
		if (this.hex.length == 3) {
			var str = this.hex.split("");
			this.hex = "0" + str[0] + "0" + str[1] + "0" + str[2];
		} else if (this.hex.length == 6) {
			this.hex = "#" + this.hex;
		}
		this.r = toDec2(this.hex[1] + this.hex[2]);
		this.g = toDec2(this.hex[3] + this.hex[4]);
		this.b = toDec2(this.hex[5] + this.hex[6]);
		if (arguments.length == 2) {
			this.alpha = arguments[3];
		} else {
			this.alpha = 127;
		}
	}
	function toDec2(){
		return parseInt(this,16);
	}
	function toHex2 () {
	if (String(this).length == 1)
		return "0" + parseInt(this,16);
	else
		return parseInt(this,16);
}
};
Color.prototype = {
	// copy : function() {
		// return new Color(this.r, this.g, this.b);
	// },
	// add : function(c) {
		// return new Color(this.r + c.r, this.g + c.g, this.b + c.b);
	// },
	// multiply : function(s) {
		// return new Color(this.r * s, this.g * s, this.b * s);
	// },
	// modulate : function(c) {
		// return new Color(this.r * c.r, this.g * c.g, this.b * c.b);
	// },
	// saturate : function() {
		// this.r = Math.min(this.r, 1);
		// this.g = Math.min(this.g, 1);
		// this.b = Math.min(this.b, 1);
	// }
};

// Color.black = new Color(0, 0, 0);
// Color.white = new Color(255, 255, 255);
// Color.red = new Color(255, 0, 0);
// Color.green = new Color(0, 255, 0);
// Color.blue = new Color(0, 0, 255);
// Color.yellow = new Color(255, 255, 0);
// Color.cyan = new Color(0, 255, 255);
// Color.purple = new Color(255, 0, 255);
		</script>
	<!-- <script type="text/javascript" src="js/stats.min.js"></script> -->

		<style>
			* {
				margin: 0;
				padding: 0;
				position: relative;
			}
			fieldset {
				padding: 10px;
				margin-bottom: 10px;
			}
			#canvas {
				position: relative;
				float: left;
				overflow: hidden;
			}
			#lifegame {
				cursor: default;
			}
			#mouse_info_fieldset {
				width: 80px;
				position: absolute;
				bottom: 0px;
				left: 0px;
				font-size: 12px;
				font-family: arial, sans-serif;
				padding: 3px;
				margin: 0px;
				background-color: rgba(0, 0, 0, 0.85);
				color: #fff;
				border: 2px solid #000;
			}
			#mouse_info_fieldset label {
				display: block;
			}
			#mouse_info_fieldset #fps {
				background: transparent;
				border: none;
				float: right;
				display: inline;
				width: 50px;
				text-align: right;
				color: yellow;
			}
			#mouse_info_fieldset label span {
				float: right;
			}
			#tool_box {
				float: left;
				width: 50%;
				border: 10px solid transparent;
				box-sizing: border-box;
			}
			#tool_box label {
				display: block;
				margin-bottom: 5px;
			}
			#tool_box button {
				width: 100px;
				height: 50px;
			}
			#world_status {
				color: red;
			}
			#tool_box #create_world {
				height: 81px;
				float: right;
				position: absolute;
				top: 18px;
				right: 10px;
			}

		</style>
	</head>
	<body>
		<div id="canvas">
			<canvas id="lifegame" width="699" height="699"></canvas>
			<fieldset id="mouse_info_fieldset" style="left: 0px;">
				<label>x <span id="x">688</span> </label>
				<label>y <span id="y">136</span> </label>
				<label>Line <span id="yb">1</span> </label>
				<label>Colunm <span id="xb">9</span> </label>
				<label>Fps
					<input id="fps" disabled="disabled" value="0">
				</label>

			</fieldset>
		</div>
		<div id="tool_box">
			<fieldset id="world_info">
				<legend>
					World Info: <span id="world_status">Stop</span>
				</legend>
				<label>Speed:
					<input id="speed">
				</label>
				<label>LivingCells:
					<input id="living_cells">
				</label>
			</fieldset>
			<fieldset>
				<legend>
					Console
				</legend>
				<fieldset>
					<legend>
						Create World
					</legend>
					<label> Lines：
						<input id="lines" type="number" min="1" max="100" value="40">
					</label>
					<label> Columns：
						<input id="columns" type="number" min="1" max="100" value="40">
					</label>
					<label> Living Cells：
						<input id="need_cells" type="number" min="1" value="80">
					</label>
					<button id="create_world">
						Create
					</button>
				</fieldset>

				<button id="clear_world">
					Clear World
				</button>
				<button id="startTaggle">Start</button>
				<button id="one_step">
					One Step
				</button>
				<button id="fastter">
					Fastter
				</button>
				<button id="lower">
					Lower
				</button>
			</fieldset>

		</div>

		<script type="text/javascript">
			function $(e) {
				return document.getElementById(e);
			}

			function addEvent(obj, type, fun) {
				obj = $(obj);
				if (obj.addEventListener) {
					obj.addEventListener(type, fun, false);
					return true;
				} else if (obj.attachEvent) {
					return obj.attachEvent("on" + type, fun);
				} else {
					return false;
				}
			};
			window.onload = function() {
				lifegame = new LifeGame('lifegame', 10, 10, 40);
				$("mouse_info_fieldset").style["left"] = "0px";
				cellx = celly = 0;
				mouseDown = false;
				cellStatusHasChange = false;
				addEvent("lifegame", "mousemove", function(ev) {
					ev = ev || window.event;
					var mousePos = mousePosition(ev);
					if (cellx != Math.ceil(mousePos.x / game.map.cellWidth) - 1 || celly != Math.ceil(mousePos.y / game.map.cellHeight) - 1)
						cellStatusHasChange = false;
					cellx = Math.ceil(mousePos.x / lifegame.map.cellWidth) - 1;
					celly = Math.ceil(mousePos.y / lifegame.map.cellHeight) - 1;
					$('x').innerHTML = mousePos.x;
					$('y').innerHTML = mousePos.y;
					$('xb').innerHTML = cellx;
					$('yb').innerHTML = celly;
					if (mouseDown && !cellStatusHasChange) {
						lifegame.changeCellStatus(lifegame.map.mapArray[celly][cellx]);
						cellStatusHasChange = true;
					}
				})
				addEvent("lifegame", "mousedown", function() {
					mouseDown = true;
				})
				addEvent("lifegame", "mouseup", function() {
					mouseDown = false;
				})
				addEvent("lifegame", "mouseleave", function() {
					mouseDown = false;
				})
				addEvent("lifegame", "click", function() {
					if (!mouseDown && !cellStatusHasChange) {
						lifegame.changeCellStatus(lifegame.map.mapArray[celly][cellx]);
					}
					cellStatusHasChange = false;
				})
				addEvent("create_world", "click", function() {
					lifegame.createMap(lifegame.map.canvasId, $("lines").value, $("columns").value, $("need_cells").value);
				})
				addEvent("clear_world", "click", function() {
					lifegame.clearMap();
				})
				addEvent("startTaggle", "click", function() {
					if (lifegame.intervalNumber == -1) {
						lifegame.startGame();
					} else {
						lifegame.stop();
					}
				})
				addEvent("one_step", "click", function() {
					if (lifegame.intervalNumber != -1)
						lifegame.stop();
					lifegame.map.draw();
					lifegame.map.render();
				})
				addEvent("fastter", "click", function() {
					if (lifegame.speed > 10) {
						lifegame.speed -= 10;
						lifegame.stop();
						$("speed").value = game.speed;
					}
				})
				addEvent("lower", "click", function() {
					lifegame.speed += 10;
					lifegame.stop();
					$("speed").value = game.speed;
				})
				addEvent("mouse_info_fieldset", "mouseover", function() {
					if (this.style["left"] == "0px") {
						this.style["left"] = "auto";
						this.style["right"] = "0px";
					} else if (this.style["right"] == "0px") {
						this.style["right"] = "auto";
						this.style["left"] = "0px";
					}
				})
				window.setInterval(setFps, 1000);
				function setFps() {
					$("fps").value = lifegame.map.fps;
					lifegame.map.fps = 0;
				}

				function mousePosition(ev) {
					if (ev.pageX || ev.pageY) {
						return {
							x : ev.pageX,
							y : ev.pageY
						};
					}
					return {
						x : ev.clientX + document.body.scrollLeft - document.body.clientLeft,
						y : ev.clientY + document.body.scrollTop - document.body.clientTop
					};
				}

			}
			//window.document.oncontextmenu = function() {
			//	return true;
			//}//禁止鼠标右键

			//document.onselectstart = new Function('event.returnValue=false;');
			//禁止鼠标选择
		</script>
	

</body></html>